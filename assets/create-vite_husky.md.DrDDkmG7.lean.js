import{_ as a,c as i,o as e,a2 as n}from"./chunks/framework.CXlnX6pr.js";const k=JSON.parse('{"title":"husky","description":"","frontmatter":{},"headers":[],"relativePath":"create-vite/husky.md","filePath":"create-vite/husky.md"}'),l={name:"create-vite/husky.md"};function p(t,s,d,r,o,c){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="husky" tabindex="-1">husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;husky&quot;">​</a></h1><ul><li><a href="https://github.com/typicode/husky" target="_blank" rel="noreferrer">husky</a>: 用来管理 git hook 的工具</li><li>虽然上面已经配置好了 <code>eslint</code>、<code>preitter</code> 与 <code>stylelint</code>，但是还是存在以下问题</li><li>对于不使用 <code>vscode</code> 的，或者没有安装 <code>eslint</code>、<code>preitter</code> 与 <code>stylelint</code> 插件的同学来说，就不能实现在保存的时候自动的去修复与和格式化代码</li><li>这样提交到 <code>git</code> 仓库的代码还是不符合要求的。因此需要引入强制的手段来保证提交到 <code>git</code> 仓库的代码时符合我们的要求的</li><li><code>husky</code> 是一个用来管理 <code>git hook</code> 的工具，<code>git hook</code> 即在我们使用 <code>git</code> 提交代码的过程中会触发的钩子</li></ul><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pnpm add husky -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="在-package-json-中的-script-中添加一条脚本命令" tabindex="-1">在 package.json 中的 script 中添加一条脚本命令 <a class="header-anchor" href="#在-package-json-中的-script-中添加一条脚本命令" aria-label="Permalink to &quot;在 package.json 中的 script 中添加一条脚本命令&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;prepare&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;husky install&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>该命令会在 <code>pnpm install</code> 之后运行，这样其他克隆该项目的同学就在装包的时候就会自动执行该命令来安装 <code>husky</code>。这里我们就不重新执行 <code>pnpm install了</code></li><li>直接执行 <code>pnpm prepare</code>，这个时候你会发现多了一个 <code>.husky</code> 目录</li><li>然后使用 <code>husky</code> 命令添加 <code>pre-commit</code> 钩子，运行</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pnpm husky add .husky/pre-commit &quot;pnpm lint:eslint &amp;&amp; pnpm format &amp;&amp; pnpm lint:stylelint&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>执行完上面的命令后，会在 <code>.husky</code> 目录下生成一个 <code>pre-commit</code> 文件</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(dirname -- &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 格式化并提交代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm run pnpm format </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pnpm run </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:eslint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pnpm run </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:stylelint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>现在当我们执行 <code>git commit</code> 的时候就会执行 <code>run pnpm format</code> 与 <code>pnpm run lint:eslint</code> 与 <code>pnpm run lint:stylelint</code>，当这三条命令出现报错，就不会提交成功。以此来保证提交代码的质量和格式</li></ul>`,11)]))}const u=a(l,[["render",p]]);export{k as __pageData,u as default};
