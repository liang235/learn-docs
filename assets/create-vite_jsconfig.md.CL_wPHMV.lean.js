import{_ as t,c as a,o as i,a2 as n}from"./chunks/framework.CXlnX6pr.js";const c=JSON.parse('{"title":"jsconfig","description":"","frontmatter":{},"headers":[],"relativePath":"create-vite/jsconfig.md","filePath":"create-vite/jsconfig.md"}'),e={name:"create-vite/jsconfig.md"};function l(p,s,r,h,d,k){return i(),a("div",null,s[0]||(s[0]=[n(`<h1 id="jsconfig" tabindex="-1">jsconfig <a class="header-anchor" href="#jsconfig" aria-label="Permalink to &quot;jsconfig&quot;">​</a></h1><ul><li>定义文件提示路径</li><li>解决项目中使用 <code>@</code> 作为路径别名，导致 <code>vscode</code> 无法跳转文件的问题</li></ul><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	compilerOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		baseUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		allows: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 指定相对于 baseUrl 选项计算的路径映射</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		paths: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 解决项目中使用 @ 作为路径别名，导致 vscode 无法跳转文件的问题</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&#39;@/*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&#39;components/*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/components/*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&#39;assets/*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/assets/*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 允许从没有默认导出的模块中默认导入。这不会影响代码发出，只是类型检查</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		allowSyntheticDefaultImports: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 不从下面路径中提示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	exclude: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="compileroptions-配置" tabindex="-1">compilerOptions 配置 <a class="header-anchor" href="#compileroptions-配置" aria-label="Permalink to &quot;compilerOptions 配置&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">noLib</td><td style="text-align:left;">不包含默认库文件 (lib.d.ts)</td></tr><tr><td style="text-align:left;">target</td><td style="text-align:left;">指定要使用的默认库 (lib.d.ts)。值为“es3”、“es5”、“es6”、“es2015”、“es2016”、“es2017”、“es2018”、“es2019”、“es2020”、“esnext”</td></tr><tr><td style="text-align:left;">module</td><td style="text-align:left;">生成模块代码时指定模块系统。值是“amd”、“commonJS”、“es2015”、“es6”、“esnext”、“none”、“system”、“umd”</td></tr><tr><td style="text-align:left;">moduleResolution</td><td style="text-align:left;">指定如何解析模块以进行导入。值是“节点”和“经典”</td></tr><tr><td style="text-align:left;">checkJs</td><td style="text-align:left;">对 JavaScript 文件启用类型检查</td></tr><tr><td style="text-align:left;">experimentalDecorators</td><td style="text-align:left;">为提议的 ES 装饰器启用实验性支持</td></tr><tr><td style="text-align:left;">allowSyntheticDefaultImports</td><td style="text-align:left;">允许从没有默认导出的模块中默认导入。这不会影响代码发出，只是类型检查</td></tr><tr><td style="text-align:left;">baseUrl</td><td style="text-align:left;">用于解析非相关模块名称的基目录</td></tr><tr><td style="text-align:left;">paths</td><td style="text-align:left;">指定相对于 baseUrl 选项计算的路径映射</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table>`,6)]))}const o=t(e,[["render",l]]);export{c as __pageData,o as default};
